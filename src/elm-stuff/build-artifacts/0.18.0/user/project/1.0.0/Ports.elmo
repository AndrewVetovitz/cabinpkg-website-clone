var _user$project$Ports$scroll = _elm_lang$core$Native_Platform.incomingPort(
	'scroll',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (x0) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (x1) {
					return _elm_lang$core$Json_Decode$succeed(
						{ctor: '_Tuple2', _0: x0, _1: x1});
				},
				A2(_elm_lang$core$Json_Decode$index, 1, _elm_lang$core$Json_Decode$float));
		},
		A2(_elm_lang$core$Json_Decode$index, 0, _elm_lang$core$Json_Decode$float)));
var _user$project$Ports$getAuth = _elm_lang$core$Native_Platform.incomingPort(
	'getAuth',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (id) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (name) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (photo_url) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (github_link) {
									return _elm_lang$core$Json_Decode$succeed(
										{id: id, name: name, photo_url: photo_url, github_link: github_link});
								},
								A2(_elm_lang$core$Json_Decode$field, 'github_link', _elm_lang$core$Json_Decode$string));
						},
						A2(_elm_lang$core$Json_Decode$field, 'photo_url', _elm_lang$core$Json_Decode$string));
				},
				A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$string)));
var _user$project$Ports$recieveUser = _elm_lang$core$Native_Platform.incomingPort(
	'recieveUser',
	_elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Json_Decode$map,
					_elm_lang$core$Maybe$Just,
					A2(
						_elm_lang$core$Json_Decode$andThen,
						function (id) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (name) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (photo_url) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												function (github_link) {
													return _elm_lang$core$Json_Decode$succeed(
														{id: id, name: name, photo_url: photo_url, github_link: github_link});
												},
												A2(_elm_lang$core$Json_Decode$field, 'github_link', _elm_lang$core$Json_Decode$string));
										},
										A2(_elm_lang$core$Json_Decode$field, 'photo_url', _elm_lang$core$Json_Decode$string));
								},
								A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string));
						},
						A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$string))),
				_1: {ctor: '[]'}
			}
		}));
var _user$project$Ports$recieveToken = _elm_lang$core$Native_Platform.incomingPort(
	'recieveToken',
	_elm_lang$core$Json_Decode$list(
		A2(
			_elm_lang$core$Json_Decode$andThen,
			function (id) {
				return A2(
					_elm_lang$core$Json_Decode$andThen,
					function (name) {
						return A2(
							_elm_lang$core$Json_Decode$andThen,
							function (owner) {
								return A2(
									_elm_lang$core$Json_Decode$andThen,
									function (created_date) {
										return A2(
											_elm_lang$core$Json_Decode$andThen,
											function (last_used_date) {
												return _elm_lang$core$Json_Decode$succeed(
													{id: id, name: name, owner: owner, created_date: created_date, last_used_date: last_used_date});
											},
											A2(
												_elm_lang$core$Json_Decode$field,
												'last_used_date',
												_elm_lang$core$Json_Decode$oneOf(
													{
														ctor: '::',
														_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
														_1: {
															ctor: '::',
															_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
															_1: {ctor: '[]'}
														}
													})));
									},
									A2(_elm_lang$core$Json_Decode$field, 'created_date', _elm_lang$core$Json_Decode$string));
							},
							A2(_elm_lang$core$Json_Decode$field, 'owner', _elm_lang$core$Json_Decode$string));
					},
					A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string));
			},
			A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$string))));
var _user$project$Ports$recievePackages = _elm_lang$core$Native_Platform.incomingPort(
	'recievePackages',
	_elm_lang$core$Json_Decode$list(
		A2(
			_elm_lang$core$Json_Decode$andThen,
			function (name) {
				return A2(
					_elm_lang$core$Json_Decode$andThen,
					function (version) {
						return A2(
							_elm_lang$core$Json_Decode$andThen,
							function (owners) {
								return A2(
									_elm_lang$core$Json_Decode$andThen,
									function (cpp_version) {
										return A2(
											_elm_lang$core$Json_Decode$andThen,
											function (description) {
												return _elm_lang$core$Json_Decode$succeed(
													{name: name, version: version, owners: owners, cpp_version: cpp_version, description: description});
											},
											A2(_elm_lang$core$Json_Decode$field, 'description', _elm_lang$core$Json_Decode$string));
									},
									A2(_elm_lang$core$Json_Decode$field, 'cpp_version', _elm_lang$core$Json_Decode$int));
							},
							A2(
								_elm_lang$core$Json_Decode$field,
								'owners',
								_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)));
					},
					A2(_elm_lang$core$Json_Decode$field, 'version', _elm_lang$core$Json_Decode$string));
			},
			A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string))));
var _user$project$Ports$recieveDetailedPackage = _elm_lang$core$Native_Platform.incomingPort(
	'recieveDetailedPackage',
	_elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Json_Decode$map,
					_elm_lang$core$Maybe$Just,
					A2(
						_elm_lang$core$Json_Decode$andThen,
						function (name) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (versions) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (owners) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												function (cpp_version) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														function (description) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																function (deps) {
																	return A2(
																		_elm_lang$core$Json_Decode$andThen,
																		function (md5hash) {
																			return A2(
																				_elm_lang$core$Json_Decode$andThen,
																				function (links) {
																					return A2(
																						_elm_lang$core$Json_Decode$andThen,
																						function (license) {
																							return A2(
																								_elm_lang$core$Json_Decode$andThen,
																								function (created_date) {
																									return _elm_lang$core$Json_Decode$succeed(
																										{name: name, versions: versions, owners: owners, cpp_version: cpp_version, description: description, deps: deps, md5hash: md5hash, links: links, license: license, created_date: created_date});
																								},
																								A2(_elm_lang$core$Json_Decode$field, 'created_date', _elm_lang$core$Json_Decode$string));
																						},
																						A2(
																							_elm_lang$core$Json_Decode$field,
																							'license',
																							_elm_lang$core$Json_Decode$oneOf(
																								{
																									ctor: '::',
																									_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
																									_1: {
																										ctor: '::',
																										_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
																										_1: {ctor: '[]'}
																									}
																								})));
																				},
																				A2(
																					_elm_lang$core$Json_Decode$field,
																					'links',
																					_elm_lang$core$Json_Decode$oneOf(
																						{
																							ctor: '::',
																							_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$core$Json_Decode$map,
																									_elm_lang$core$Maybe$Just,
																									A2(
																										_elm_lang$core$Json_Decode$andThen,
																										function (github) {
																											return A2(
																												_elm_lang$core$Json_Decode$andThen,
																												function (homepage) {
																													return _elm_lang$core$Json_Decode$succeed(
																														{github: github, homepage: homepage});
																												},
																												A2(
																													_elm_lang$core$Json_Decode$field,
																													'homepage',
																													_elm_lang$core$Json_Decode$oneOf(
																														{
																															ctor: '::',
																															_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
																															_1: {
																																ctor: '::',
																																_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
																																_1: {ctor: '[]'}
																															}
																														})));
																										},
																										A2(
																											_elm_lang$core$Json_Decode$field,
																											'github',
																											_elm_lang$core$Json_Decode$oneOf(
																												{
																													ctor: '::',
																													_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
																													_1: {
																														ctor: '::',
																														_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
																														_1: {ctor: '[]'}
																													}
																												})))),
																								_1: {ctor: '[]'}
																							}
																						})));
																		},
																		A2(_elm_lang$core$Json_Decode$field, 'md5hash', _elm_lang$core$Json_Decode$string));
																},
																A2(
																	_elm_lang$core$Json_Decode$field,
																	'deps',
																	_elm_lang$core$Json_Decode$oneOf(
																		{
																			ctor: '::',
																			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$core$Json_Decode$map,
																					_elm_lang$core$Maybe$Just,
																					_elm_lang$core$Json_Decode$list(
																						A2(
																							_elm_lang$core$Json_Decode$andThen,
																							function (name) {
																								return A2(
																									_elm_lang$core$Json_Decode$andThen,
																									function (version) {
																										return _elm_lang$core$Json_Decode$succeed(
																											{name: name, version: version});
																									},
																									A2(_elm_lang$core$Json_Decode$field, 'version', _elm_lang$core$Json_Decode$string));
																							},
																							A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string)))),
																				_1: {ctor: '[]'}
																			}
																		})));
														},
														A2(_elm_lang$core$Json_Decode$field, 'description', _elm_lang$core$Json_Decode$string));
												},
												A2(_elm_lang$core$Json_Decode$field, 'cpp_version', _elm_lang$core$Json_Decode$int));
										},
										A2(
											_elm_lang$core$Json_Decode$field,
											'owners',
											_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)));
								},
								A2(
									_elm_lang$core$Json_Decode$field,
									'versions',
									_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)));
						},
						A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string))),
				_1: {ctor: '[]'}
			}
		}));
var _user$project$Ports$signin = _elm_lang$core$Native_Platform.outgoingPort(
	'signin',
	function (v) {
		return null;
	});
var _user$project$Ports$signout = _elm_lang$core$Native_Platform.outgoingPort(
	'signout',
	function (v) {
		return null;
	});
var _user$project$Ports$fetchUser = _elm_lang$core$Native_Platform.outgoingPort(
	'fetchUser',
	function (v) {
		return v;
	});
var _user$project$Ports$fetchToken = _elm_lang$core$Native_Platform.outgoingPort(
	'fetchToken',
	function (v) {
		return v;
	});
var _user$project$Ports$createToken = _elm_lang$core$Native_Platform.outgoingPort(
	'createToken',
	function (v) {
		return v;
	});
var _user$project$Ports$deleteToken = _elm_lang$core$Native_Platform.outgoingPort(
	'deleteToken',
	function (v) {
		return v;
	});
var _user$project$Ports$fetchPackages = _elm_lang$core$Native_Platform.outgoingPort(
	'fetchPackages',
	function (v) {
		return null;
	});
var _user$project$Ports$fetchOwnedPackages = _elm_lang$core$Native_Platform.outgoingPort(
	'fetchOwnedPackages',
	function (v) {
		return v;
	});
var _user$project$Ports$fetchDetailedPackage = _elm_lang$core$Native_Platform.outgoingPort(
	'fetchDetailedPackage',
	function (v) {
		return v;
	});
var _user$project$Ports$createGraph = _elm_lang$core$Native_Platform.outgoingPort(
	'createGraph',
	function (v) {
		return null;
	});
