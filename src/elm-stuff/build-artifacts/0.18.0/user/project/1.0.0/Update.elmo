var _user$project$Update$urlUpdate = function (model) {
	var _p0 = model.route;
	switch (_p0.ctor) {
		case 'UsersRoute':
			var _p2 = _p0._0;
			var _p1 = model.otherUser;
			switch (_p1.ctor) {
				case 'NotRequested':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{otherUser: _user$project$Model$Requesting}),
						_1: _elm_lang$core$Platform_Cmd$batch(
							{
								ctor: '::',
								_0: _user$project$Ports$fetchUser(_p2),
								_1: {
									ctor: '::',
									_0: _user$project$Ports$fetchOwnedPackages(_p2),
									_1: {ctor: '[]'}
								}
							})
					};
				case 'Success':
					return (!_elm_lang$core$Native_Utils.eq(_p1._0.id, _p2)) ? {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{otherUser: _user$project$Model$Requesting}),
						_1: _elm_lang$core$Platform_Cmd$batch(
							{
								ctor: '::',
								_0: _user$project$Ports$fetchUser(_p2),
								_1: {
									ctor: '::',
									_0: _user$project$Ports$fetchOwnedPackages(_p2),
									_1: {ctor: '[]'}
								}
							})
					} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				default:
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			}
		case 'SettingsRoute':
			var _p3 = _p0._0;
			switch (_p3) {
				case 'dashboard':
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _user$project$Ports$createGraph(
							{ctor: '_Tuple0'})
					};
				case 'tokens':
					var _p4 = {ctor: '_Tuple2', _0: model.signinUser, _1: model.currentToken};
					if (((_p4.ctor === '_Tuple2') && (_p4._0.ctor === 'Success')) && (_p4._1.ctor === 'NotRequested')) {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{currentToken: _user$project$Model$Requesting}),
							_1: _user$project$Ports$fetchToken(_p4._0._0.id)
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				default:
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			}
		case 'PackagesRoute':
			var _p7 = _p0._0;
			if (_elm_lang$core$String$isEmpty(_p7)) {
				var _p5 = model.listPackages;
				if (_p5.ctor === 'NotRequested') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{listPackages: _user$project$Model$Requesting}),
						_1: _user$project$Ports$fetchPackages(
							{ctor: '_Tuple0'})
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			} else {
				var _p6 = model.detailedPackage;
				switch (_p6.ctor) {
					case 'NotRequested':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{detailedPackage: _user$project$Model$Requesting}),
							_1: _user$project$Ports$fetchDetailedPackage(_p7)
						};
					case 'Success':
						return (!_elm_lang$core$Native_Utils.eq(_p6._0.name, _p7)) ? {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{detailedPackage: _user$project$Model$Requesting}),
							_1: _user$project$Ports$fetchDetailedPackage(_p7)
						} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			}
		case 'OrgPackagesRoute':
			var oname = A2(
				_elm_lang$core$Basics_ops['++'],
				_p0._0,
				A2(_elm_lang$core$Basics_ops['++'], '/', _p0._1));
			if (_elm_lang$core$String$isEmpty(oname)) {
				var _p8 = model.listPackages;
				if (_p8.ctor === 'NotRequested') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{listPackages: _user$project$Model$Requesting}),
						_1: _user$project$Ports$fetchPackages(
							{ctor: '_Tuple0'})
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			} else {
				var _p9 = model.detailedPackage;
				switch (_p9.ctor) {
					case 'NotRequested':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{detailedPackage: _user$project$Model$Requesting}),
							_1: _user$project$Ports$fetchDetailedPackage(oname)
						};
					case 'Success':
						return (!_elm_lang$core$Native_Utils.eq(_p9._0.name, oname)) ? {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{detailedPackage: _user$project$Model$Requesting}),
							_1: _user$project$Ports$fetchDetailedPackage(oname)
						} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			}
		default:
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
	}
};
var _user$project$Update$getUserId = function (user) {
	var _p10 = user;
	if (_p10.ctor === 'Success') {
		return _elm_lang$core$Maybe$Just(_p10._0.id);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Update$getUserIdWithDefault = function (user) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_user$project$Update$getUserId(user));
};
var _user$project$Update$setIsFadein = F2(
	function (newIsFadein, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{isFadein: newIsFadein});
	});
var _user$project$Update$asIsFadein = _elm_lang$core$Basics$flip(_user$project$Update$setIsFadein);
var _user$project$Update$setGetStart = F2(
	function (newBool, isFadein) {
		return _elm_lang$core$Native_Utils.update(
			isFadein,
			{getStart: newBool});
	});
var _user$project$Update$asGetStartIn = _elm_lang$core$Basics$flip(_user$project$Update$setGetStart);
var _user$project$Update$setDemo = F2(
	function (newBool, isFadein) {
		return _elm_lang$core$Native_Utils.update(
			isFadein,
			{demo: newBool});
	});
var _user$project$Update$asDemoIn = _elm_lang$core$Basics$flip(_user$project$Update$setDemo);
var _user$project$Update$setSection1 = F2(
	function (newBool, isFadein) {
		return _elm_lang$core$Native_Utils.update(
			isFadein,
			{section1: newBool});
	});
var _user$project$Update$asSection1In = _elm_lang$core$Basics$flip(_user$project$Update$setSection1);
var _user$project$Update$setAbstract = F2(
	function (newBool, isFadein) {
		return _elm_lang$core$Native_Utils.update(
			isFadein,
			{$abstract: newBool});
	});
var _user$project$Update$asAbstractIn = _elm_lang$core$Basics$flip(_user$project$Update$setAbstract);
var _user$project$Update$update = F2(
	function (msg, model) {
		var _p11 = msg;
		switch (_p11.ctor) {
			case 'UrlChange':
				var currentRoute = _user$project$Routing$parse(_p11._0);
				return _user$project$Update$urlUpdate(
					_elm_lang$core$Native_Utils.update(
						model,
						{route: currentRoute}));
			case 'NavigateTo':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _elm_lang$navigation$Navigation$newUrl(
						_user$project$Routing$toPath(_p11._0))
				};
			case 'HandleSearchInput':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{search: _p11._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'HandleTokenInput':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newTokenName: _p11._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FetchUser':
				var _p12 = _p11._0;
				if (_p12.ctor === 'Just') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								otherUser: _user$project$Model$Success(_p12._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{otherUser: _user$project$Model$Failure}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'FetchToken':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currentToken: _user$project$Model$Success(_p11._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'CreateToken':
				return _elm_lang$core$String$isEmpty(model.newTokenName) ? {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none} : {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{currentToken: _user$project$Model$Requesting}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: _user$project$Ports$createToken(model.newTokenName),
							_1: {
								ctor: '::',
								_0: _user$project$Ports$fetchToken(
									_user$project$Update$getUserIdWithDefault(model.signinUser)),
								_1: {ctor: '[]'}
							}
						})
				};
			case 'RevokeToken':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{currentToken: _user$project$Model$Requesting}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: _user$project$Ports$deleteToken(_p11._0),
							_1: {
								ctor: '::',
								_0: _user$project$Ports$fetchToken(
									_user$project$Update$getUserIdWithDefault(model.signinUser)),
								_1: {ctor: '[]'}
							}
						})
				};
			case 'LoginOrSignup':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Ports$signin(
						{ctor: '_Tuple0'})
				};
			case 'Signin':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							signinUser: _user$project$Model$Success(_p11._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Signout':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: _user$project$Ports$signout(
								{ctor: '_Tuple0'}),
							_1: {
								ctor: '::',
								_0: _elm_lang$navigation$Navigation$reload,
								_1: {ctor: '[]'}
							}
						})
				};
			case 'FetchPackages':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							listPackages: _user$project$Model$Success(_p11._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FetchDetailedPackage':
				if (_p11._0.ctor === 'Just') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								detailedPackage: _user$project$Model$Success(_p11._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{detailedPackage: _user$project$Model$Failure}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'ScrollHandle':
				var _p13 = model.route;
				if (_p13.ctor === 'HomeIndexRoute') {
					return A3(
						_abrykajlo$elm_scroll$Scroll$handle,
						{
							ctor: '::',
							_0: A2(
								_abrykajlo$elm_scroll$Scroll$onCrossDown,
								200,
								_user$project$Update$update(
									_user$project$Messages$Fadein(_user$project$Messages$Abstract))),
							_1: {
								ctor: '::',
								_0: A2(
									_abrykajlo$elm_scroll$Scroll$onCrossDown,
									600,
									_user$project$Update$update(
										_user$project$Messages$Fadein(_user$project$Messages$Section1))),
								_1: {
									ctor: '::',
									_0: A2(
										_abrykajlo$elm_scroll$Scroll$onCrossDown,
										1100,
										_user$project$Update$update(
											_user$project$Messages$Fadein(_user$project$Messages$Demo))),
									_1: {
										ctor: '::',
										_0: A2(
											_abrykajlo$elm_scroll$Scroll$onCrossDown,
											1600,
											_user$project$Update$update(
												_user$project$Messages$Fadein(_user$project$Messages$GetStart))),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						_p11._0,
						model);
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			default:
				var asIn = function () {
					var _p14 = _p11._0;
					switch (_p14.ctor) {
						case 'Abstract':
							return _user$project$Update$asAbstractIn;
						case 'Section1':
							return _user$project$Update$asSection1In;
						case 'Demo':
							return _user$project$Update$asDemoIn;
						default:
							return _user$project$Update$asGetStartIn;
					}
				}();
				var newModel = A2(
					_user$project$Update$asIsFadein,
					model,
					A2(asIn, model.isFadein, true));
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
