steps:
- name: 'gcr.io/cloud-builders/docker'
  args:
  - 'build'
  - '-f'
  - 'Dockerfile'
  - '--tag=gcr.io/$PROJECT_ID/$REPO_NAME:$COMMIT_SHA'
  - '.'
# 作成したpoac-pm-clusterイメージをPUSHする
- name: 'gcr.io/cloud-builders/docker'
  args: [ 'push', 'gcr.io/$PROJECT_ID/$REPO_NAME:$COMMIT_SHA' ]
# アプリのデプロイ設定
- name: 'gcr.io/cloud-builders/kubectl'
  args: [ 'apply', '-f', '.cloudbuild/deployment.yaml' ]
  env:
  - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
  - 'CLOUDSDK_CONTAINER_CLUSTER=poac-pm-cluster'
# NodePortのサービスを登録する 30580->8080
- name: 'gcr.io/cloud-builders/kubectl'
  args: [ 'apply', '-f', '.cloudbuild/service.yaml' ]
  env:
  - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
  - 'CLOUDSDK_CONTAINER_CLUSTER=poac-pm-cluster'
# イメージをDeploymentにセットする。
- name: 'gcr.io/cloud-builders/kubectl'
  args:
  - 'set'
  - 'image'
  - 'deployment/poac-pm-cluster'
  - 'poac-pm-cluster=gcr.io/$PROJECT_ID/$REPO_NAME:$COMMIT_SHA'
# To see the Deployment rollout status
#- name: 'gcr.io/cloud-builders/kubectl'
#  args:
#  - 'rollout'
#  - 'status'
#  - 'deployment/poac-pm-cluster'


# Install the Helm server-side components (Tiller) on GKE cluster
- name: 'gcr.io/cloud-builders/kubectl'
  args: [ 'create', 'serviceaccount', '-n', 'kube-system', 'tiller' ]

- name: 'gcr.io/cloud-builders/kubectl'
  args:
  - 'create'
  - 'clusterrolebinding'
  - 'tiller-binding'
  - '--clusterrole=cluster-admin'
  - '--serviceaccount kube-system:tiller'

- name: 'gcr.io/cloud-builders-community/helm'
  args: [ 'init', '--service-account', 'tiller' ]

# Once tiller pod becomes ready, update chart repositories
- name: 'gcr.io/cloud-builders-community/helm'
  args: [ 'repo', 'update' ]


# Install cert-manager
- name: 'gcr.io/cloud-builders-community/helm'
  args:
  - 'install'
  - '--name cert-manager'
  - '--version v0.4.1'
  - '--namespace kube-system'
  - 'stable/cert-manager'


# Create secret
- name: 'gcr.io/cloud-builders/kubectl'
  args:
  - '-n kube-system'
  - 'create'
  - 'secret'
  - 'generic'
  - 'prod-route53-credentials-secret'
  - '--from-literal=secret-access-key=$_AWS_SECRET_ACCESS_KEY'

#
- name: 'echo'
  args:
  - 'apiVersion: certmanager.k8s.io/v1alpha1
kind: ClusterIssuer
metadata:
  name: letsencrypt-issuer
spec:
  acme:
    email: $_EMAIL
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-private-key
    dns01:
      providers:
      - name: route53
        route53:
          accessKeyID: $_AWS_ACCESS_KEY_ID
          region: us-east-1
          secretAccessKeySecretRef:
            key: secret-access-key
            name: prod-route53-credentials-secret'
  - '> clusterissuer-letsencrypt.yaml'

- name: 'gcr.io/cloud-builders/kubectl'
  args: [ 'apply', '-f', 'clusterissuer-letsencrypt.yaml' ]

# Create issuer
- name: 'gcr.io/cloud-builders/kubectl'
  args: [ 'apply', '-f', '.cloudbuild/issuer.yaml' ]

# Create certificate
- name: 'gcr.io/cloud-builders/kubectl'
  args: [ 'apply', '-f', '.cloudbuild/certificate.yaml' ]

# Check status
- name: 'gcr.io/cloud-builders/kubectl'
  args:
  - 'certificate,issuer,clusterissuer'
  - '--all-namespaces'

# Link certificate to ingress
- name: 'gcr.io/cloud-builders/kubectl'
  args: [ 'apply', '-f', '.cloudbuild/ingress.yaml' ]
